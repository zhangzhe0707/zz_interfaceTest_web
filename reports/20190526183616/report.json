{"report": {"environment": {"Python": "3.6.5", "Platform": "Darwin-17.7.0-x86_64-i386-64bit"}, "tests": [{"name": "RunCode/test_Run.py::test_all_run[case_data0]", "duration": 0.33421802520751953, "run_index": 0, "setup": {"name": "setup", "duration": 0.0007560253143310547, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3323349952697754, "outcome": "failed", "longrepr": "case_data = {'caseData': 'ip=27.193.13.255', 'caseFrontSQL': '', 'caseLabel': '', 'caseMethod': 'get', ...}\n\n    @pytest.mark.parametrize('case_data', base_code.get_case_data())\n    def test_all_run(case_data):\n        base_http = BaseHttp()\n        response = None\n        Log.logger.info(case_data['caseName'])\n        if case_data['caseMethod'] == 'post':\n            response = base_http.post(case_data['caseUri'], case_data['caseData'])\n        elif case_data['caseMethod'] == 'get':\n            response = base_http.get(case_data['caseUri'], case_data['caseData'])\n        elif case_data['caseMethod'] == \"post_with_json\":\n            response = base_http.post_with_json(case_data[\"caseUri\"], case_data[\"caseData\"])\n        else:\n            Log.logger.info(\"\u672a\u627e\u5230\u6b63\u786e\u7684 Method \u7c7b\u578b\")\n    \n        # \u65e5\u5fd7\u8bb0\u5f55\u8fd4\u56de\u4f53\u5185\u5bb9\n        base_code.show_retrun_msg(response)\n    \n        # # \u9a8c\u8bc1\u8fd4\u56de http code\n>       assert int(case_data[\"caseStatusCode\"]) == response.status_code\nE       ValueError: invalid literal for int() with base 10: '2019-05-25 16:00:53.297628'\n\nRunCode/test_Run.py:34: ValueError", "log": "baseDB.py                   55 INFO     \u6570\u636e\u5e93\u8fde\u63a5\u6210\u529f!\nbaseDB.py                   69 INFO     \u6267\u884cSQL\u547d\u4ee4\u4e3a:Select Id,EnvName,EnvBaseUrl,EnvScheme,EnvPort,EnvTimeout from WebServer_envconfig where EnvName=\"tianqi\"\nbaseDB.py                   92 INFO     \u6267\u884c\u6570\u636e\u5e93\u67e5\u8be2\u7684\u7ed3\u679c\u5355\u884c\u6570\u636e:(2, 'tianqi', 'ip.tianqiapi.com', 'https', '', '10')\nbaseDB.py                  116 INFO     \u6570\u636e\u5e93\u8fde\u63a5\u5173\u95ed!\nbaseCode.py                 72 INFO     \u6d4b\u8bd5\u73af\u5883\u6570\u636etianqi\u5b8c\u6210\u8bfb\u53d6.\ntest_Run.py                 20 INFO     \u5929\u6c14\nbaseCode.py                 45 INFO     \u8bf7\u6c42\u5730\u5740:https://ip.tianqiapi.com/?ip=27.193.13.255\nbaseCode.py                 47 INFO     \u8bf7\u6c42\u8fd4\u56de\u503c:{\n    \"city\": \"\u9752\u5c9b\u5e02\",\n    \"country\": \"\u4e2d\u56fd\",\n    \"ip\": \"27.193.13.255\",\n    \"isp\": \"\u8054\u901a\",\n    \"province\": \"\u5c71\u4e1c\u7701\"\n}"}, "teardown": {"name": "teardown", "duration": 0.00037097930908203125, "outcome": "passed"}, "outcome": "failed"}, {"name": "RunCode/test_Run.py::test_all_run[case_data1]", "duration": 0.2647218704223633, "run_index": 1, "setup": {"name": "setup", "duration": 0.0005600452423095703, "outcome": "passed"}, "call": {"name": "call", "duration": 0.26317286491394043, "outcome": "failed", "longrepr": "case_data = {'caseData': 'ip=39.82.135.234', 'caseFrontSQL': '', 'caseLabel': '', 'caseMethod': 'get', ...}\n\n    @pytest.mark.parametrize('case_data', base_code.get_case_data())\n    def test_all_run(case_data):\n        base_http = BaseHttp()\n        response = None\n        Log.logger.info(case_data['caseName'])\n        if case_data['caseMethod'] == 'post':\n            response = base_http.post(case_data['caseUri'], case_data['caseData'])\n        elif case_data['caseMethod'] == 'get':\n            response = base_http.get(case_data['caseUri'], case_data['caseData'])\n        elif case_data['caseMethod'] == \"post_with_json\":\n            response = base_http.post_with_json(case_data[\"caseUri\"], case_data[\"caseData\"])\n        else:\n            Log.logger.info(\"\u672a\u627e\u5230\u6b63\u786e\u7684 Method \u7c7b\u578b\")\n    \n        # \u65e5\u5fd7\u8bb0\u5f55\u8fd4\u56de\u4f53\u5185\u5bb9\n        base_code.show_retrun_msg(response)\n    \n        # # \u9a8c\u8bc1\u8fd4\u56de http code\n>       assert int(case_data[\"caseStatusCode\"]) == response.status_code\nE       ValueError: invalid literal for int() with base 10: '2019-05-25 15:52:55.393661'\n\nRunCode/test_Run.py:34: ValueError", "log": "baseDB.py                   55 INFO     \u6570\u636e\u5e93\u8fde\u63a5\u6210\u529f!\nbaseDB.py                   69 INFO     \u6267\u884cSQL\u547d\u4ee4\u4e3a:Select Id,EnvName,EnvBaseUrl,EnvScheme,EnvPort,EnvTimeout from WebServer_envconfig where EnvName=\"tianqi\"\nbaseDB.py                   92 INFO     \u6267\u884c\u6570\u636e\u5e93\u67e5\u8be2\u7684\u7ed3\u679c\u5355\u884c\u6570\u636e:(2, 'tianqi', 'ip.tianqiapi.com', 'https', '', '10')\nbaseDB.py                  116 INFO     \u6570\u636e\u5e93\u8fde\u63a5\u5173\u95ed!\nbaseCode.py                 72 INFO     \u6d4b\u8bd5\u73af\u5883\u6570\u636etianqi\u5b8c\u6210\u8bfb\u53d6.\ntest_Run.py                 20 INFO     \u5929\u6c142\nbaseCode.py                 45 INFO     \u8bf7\u6c42\u5730\u5740:https://ip.tianqiapi.com/?ip=39.82.135.234\nbaseCode.py                 47 INFO     \u8bf7\u6c42\u8fd4\u56de\u503c:{\n    \"city\": \"\u6d4e\u5357\u5e02\",\n    \"country\": \"\u4e2d\u56fd\",\n    \"ip\": \"39.82.135.234\",\n    \"isp\": \"\u8054\u901a\",\n    \"province\": \"\u5c71\u4e1c\u7701\"\n}"}, "teardown": {"name": "teardown", "duration": 0.00042891502380371094, "outcome": "passed"}, "outcome": "failed"}], "summary": {"failed": 2, "num_tests": 2, "duration": 0.908545732498169}, "created_at": "2019-05-26 18:36:21.833757"}}